[{"content":"\n\n## web页面乱码\n如果是html页面，可以使用\n``` html\n\u003cmeta http-equiv=\"content-type\" content=\"text/html;charset=gbk\" /\u003e\n```\n如果是jsp页面，可以使用\n``` html\n\u003c%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%\u003e  \n```\n\n## 后端服务器中中文乱码\n当服务器接收到网页请求参数，参数是中文，而且发生乱码，则可能是由于一下原因：\n\n- web页面中文编码和后端服务器编码不一致，比如说web客户端使用的是ISO的编码，而服务器使用的是其他编码，就会出现乱码\n- 客户端使用了URLEncode\n\n可能的解决方案：\n\n- 对于第一种原因，需要对接收的每个字符串变量重新编码或者对请求增加filter\n\n\u0026emsp;\u0026emsp;\u0026emsp;1. 重新编码比较简单\n\n``` java\nnew String(request.getParameter(\"str\").getBytes(\"ISO-8859-1\"),\"UTF-8\")\n```\n\n\u0026emsp;\u0026emsp;\u0026emsp;2. 增加filter\n\n\u0026emsp;\u0026emsp;\u0026emsp;修改项目配置文件`web.xml`，增加如下代码\n``` xml\n\u003cfilter\u003e  \n    \u003cfilter-name\u003echaracterEncodingFilter\u003c/filter-name\u003e  \n    \u003cfilter-class\u003eorg.springframework.web.filter.CharacterEncodingFilter\u003c/filter-class\u003e  \n    \u003cinit-param\u003e  \n    \t\u003cparam-name\u003eencoding\u003c/param-name\u003e  \n    \t\u003cparam-value\u003eUTF-8\u003c/param-value\u003e  \n    \u003c/init-param\u003e  \n    \u003cinit-param\u003e  \n            \u003cparam-name\u003eforceEncoding\u003c/param-name\u003e  \n            \u003cparam-value\u003etrue\u003c/param-value\u003e  \n    \u003c/init-param\u003e  \n\u003c/filter\u003e  \n\u003cfilter-mapping\u003e  \n    \u003cfilter-name\u003echaracterEncodingFilter\u003c/filter-name\u003e  \n    \u003curl-pattern\u003e/*\u003c/url-pattern\u003e  \n\u003c/filter-mapping\u003e  \n```\n\u003cbr/\u003e\n\n- 对于第二种原因，一般是不会发生乱码的，发生乱码一般是由于请求为`GET`请求，中文参数放在URL内，而服务器没有进行相应的设置\n\n\u0026emsp;\u0026emsp;\u0026emsp;以tomcat为例，修改`server.xml`，增加`URIEncoding=\"UTF-8\"`即可\n``` xml\n\u003cConnector URIEncoding=\"UTF-8\" connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/\u003e\n```\n\n## 数据库乱码（mysql）\n如果服务没有出现乱码，那么说明是数据库的语言配置出问题了，可以通过`show variables like 'character_set_%';`来查看数据库的编码\n![](/blog/images/springMVC-mysql-gibberish/mysql-charset.jpeg)\n\n其中需要关注的是`服务器`、`数据库`和`数据表部分`的编码，如果这三部分不是你想要的编码，那么需要修改。\n``` sql\nmysql\u003e SET character_set_client='utf8';\nmysql\u003e SET character_set_connection='utf8';\nmysql\u003e SET character_set_results='utf8';\n```\n\n\u003e 注意的是，上述的仅作用于当前的session，也就是当前数据库用户退出后失效\n\n如果想永久设置，需要修改mysql的`my.cnf`，通过`vim /etc/my.cnf`命令来编辑该文件，进入编辑状态后，在其中修改\n``` cnf\n[mysqld]\ndefault-character-set=utf8\n\n[client]\ndefault-character-set=utf8\n\n[mysql]\ndefault-character-set=utf8\n```\n修改完成后，重启数据库即可，`service mysqld restart`\n\n除了上述修改编码的方式，还可以在建表时指定表的charset。有的时候一个数据库可能有多个用户在使用，如果直接修改整个数据库的编码，可能造成其他用户的不便，所以可以不改变整个系统的语言，仅指定自己所建表的编码\n``` sql\ncreate table mytable(\n\tname varchar(100)\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n\n\n","cover":"","link":"springmvc-mysql-gibberish.html","preview":"\u003cp\u003e在使用springMVC + Hibernate时，有时会出现中文乱码。一般中文乱码出现在web页面，后端服务器和数据库中，而其原因有很多。\u003c/p\u003e\n","title":"springMVC-mysql中文乱码"},{"content":"\n\n## github个人主页(github pages)简介\n\ngithub pages简介以及如何搭建在[github help](https://help.github.com/categories/github-pages-basics/)里有详细的描述。\n本文目的是将其步骤简化，达到快速搭建github个人主页的目的。\n\n### 搭建步骤\n1. 申请一个github账号\n2. 登录后，新建一个代码仓库，仓库名为 yourusername.github.io\n\n    ![新建代码仓库过程](/blog/images/github-personal-website/create_new_repository.jpeg)\n\n    \u003e 图片中的warning是由于本人已经创建过该仓库了\n\n3. 在本地电脑安装[github工具](https://git-for-windows.github.io/)，这里给出的是windows版本的，linux和mac的自行安装\n4. 在本地新建一个文件夹，进入文件夹后新建一个`index.html`的文件，用记事本打开它，在里面写入`我的个人主页`(如果你会html，那么可以在里面编辑自己想要的页面)\n5. 将该文件夹里面的文件`index.html`推到新建的代码仓库，github本地配置以及将代码推到远程仓库的教程已经有很多了，这里可以参照[这一篇](http://blog.csdn.net/qq_24489717/article/details/52556072)\n6. 上传代码完成后，可通过`yourusername.github.io`这个域名访问你的个人主页了\n","cover":"","link":"github-personal-website.html","preview":"\u003cp\u003egithub除了提供分布式代码管理，还提供了个人主页的搭建。\u003c/p\u003e\n","title":"github个人主页搭建"}]